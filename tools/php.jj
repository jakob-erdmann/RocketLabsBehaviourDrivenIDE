/*

  PHP grammar defintion for use with JavaCC
  By Satyam (satyam@satyam.com.ar)

  This is a partial grammar which I meant to use in a project of mine.
  I refined it a little bit beyond my specific need, but didn't go to the very end.
  It works for the purpose of my project, but it is not complete.

  It was tested by parsing all the source files in the PHP 5.0 test suite,
  and a couple of other applications (a CMS and an image gallery).
  Some files in these sets were skipped because they use syntax not supported
  in this parser, as noted in the TODO lists below.


TODO:

- Alternate notation for control flow, if: endif, etc.
- Curly braces to disambiguate variable variable array references: ${$a[1]} against ${$a}[1]
- Notice comment on line 555
- There are a couple of warnings when compiling which I wasn't able to solve nor was I able
  to figure out if they mattered at all.

- To regenerate classes run 'java -classpath "../../../lib/javacc-6.0.jar" javacc ./php.jj' from this directory
*/

options {
  STATIC = false;
  OUTPUT_DIRECTORY = "./src/main/java/de/rocketlabs/behatide/php/";
  SANITY_CHECK = false;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}


PARSER_BEGIN(PhpParser)
package de.rocketlabs.behatide.php;
import java.util.*;
import de.rocketlabs.behatide.php.model.*;
import java.io.InputStream;

public final class PhpParser {
    public static PhpFile parse (InputStream stream) throws ParseException {
        PhpParser parser = new PhpParser(stream);
        parser.token_source.SwitchTo(HTML_STATE);
        return parser.PhpFile();
    }

    private List add(List list, Object obj) {
        if (list == null) {
            list = new LinkedList();
        }
        list.add(obj);
        return list;
    }
}
PARSER_END(PhpParser)

TOKEN_MGR_DECLS : {
    static String HereDocEnd;
}

<HTML_STATE> TOKEN [IGNORE_CASE]: {
    <PHP_BEGIN: "<?" ("php")?> : DEFAULT  |
    <PHP_EXPR: "<?=" > : DEFAULT |
    <HTML_OTHER: "<" ~[] >
}

<HTML_STATE> TOKEN : {
    <HTML: (~["<"] | "<" ~["?"])+ >
}

<DEFAULT> SKIP :
{    " "
|    "\t"
|    "\n"
|    "\r"
|    <SLASH_SLASH_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|    <NUMERAL_COMMENT: "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

<DEFAULT> TOKEN :
{
    <SLASH_STAR_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

<DEFAULT> TOKEN :
{    <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|          <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|          <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|          <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|      <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|          <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|      <DOUBLE_STRING_LITERAL_START: "\""> : DOUBLE_STRING_LITERAL
|      <SINGLE_STRING_LITERAL_START: "'">  : SINGLE_STRING_LITERAL
|     <HEREDOC_START: "<<<"> : HEREDOC1
}

<SINGLE_STRING_LITERAL> MORE: {
    <"\\">: SSL_SPECIAL
}

<SINGLE_STRING_LITERAL> TOKEN: {
    <SINGLE_STRING_LITERAL_END: "'">: DEFAULT
}

<SINGLE_STRING_LITERAL> MORE:
{    <(~[])>
}

<SSL_SPECIAL> MORE:
{    <["'" , "\\"] > : SINGLE_STRING_LITERAL
|    < ~[]> : SINGLE_STRING_LITERAL
}

<DOUBLE_STRING_LITERAL> TOKEN: {
    <DOUBLE_STRING_LITERAL_END: "\""> : DEFAULT
}

<DOUBLE_STRING_LITERAL> TOKEN:
{    <DSL_SIMPLE_VAR_START: "$"> :DSL_SIMPLE_VAR
|    <DSL_COMPLEX_VAR_START: ("{$" | "${") > :DSL_COMPLEX_VAR
}

<DOUBLE_STRING_LITERAL> MORE: {
    <"\\"> : DSL_SPECIAL
}

<DOUBLE_STRING_LITERAL> MORE: {
    <TEXT: (~[])>
}

<DSL_COMPLEX_VAR> TOKEN: {
    <DSL_COMPLEX_VAR_END: "}"> :DOUBLE_STRING_LITERAL
}

<DSL_COMPLEX_VAR> MORE: {
    <DSL_CV_TEXT: (~[])>
}

<DSL_SIMPLE_VAR> TOKEN:
{    <DSL_SIMPLE_VAR_END: <IDENTIFIER> ("[" <IDENTIFIER> "]") ? > :DOUBLE_STRING_LITERAL
}

<DSL_SIMPLE_VAR> TOKEN:
{    <DSL_SIMPLE_STRING_VAR_END: "\""> :DEFAULT
}

<DSL_SIMPLE_VAR> TOKEN:
{     <DSL_SIMPLE_VAR_WASNT: ~[]> :DOUBLE_STRING_LITERAL
}

<DSL_SPECIAL> MORE: {
    <["n","t","b","r","f","\\","\"","$","{"]> :DOUBLE_STRING_LITERAL  |
    <(["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])> :DOUBLE_STRING_LITERAL |
    <("x" | "X") ["0"-"9","A"-"F","a"-"f"](["0"-"9","A"-"F","a"-"f"])?> :DOUBLE_STRING_LITERAL |
    < ~[]>:DOUBLE_STRING_LITERAL
}


<HEREDOC1> SKIP: {
    <HD1: <IDENTIFIER>> {
        HereDocEnd = image.toString();
    } :HEREDOC
}
<HEREDOC> SKIP: {
    <~["\n"]> |
    <"\n"> :HEREDOC2
}

<HEREDOC, HEREDOC2> SKIP: {
    < "\r" | " " >
}

<HEREDOC2> SKIP: {
    <"\n"> |
    <HD2: <IDENTIFIER>>
     {
        SwitchTo( HereDocEnd.equals(image.toString()) ? DEFAULT : HEREDOC ) ;
    } |
    <~[] > :HEREDOC
}

<DEFAULT> TOKEN : {
    <REQUIRE_ONCE: "require_once"> |
    <REQUIRE: "require"> |
    <INCLUDE_ONCE: "include_once"> |
    <INCLUDE: "include"> |

    <NAMESPACE: "namespace"> |
    <USE: "use"> |

    <DEFINE: "define"> |

    <ECHO: "echo"> |
    <PRINT: "print"> |

    <SWITCH: "switch"> |
    <CASE: "case"> |
    <DFLT: "default"> |
    <BREAK: "break"> |

    <RETURN: "return"> |

    <DO: "do"> |

    <WHILE: "while"> |

    <FOREACH: "foreach"> |
    <AS: "as"> |
    <INSTEADOF: "insteadof"> |

    <FOR: "for"> |
    <CONTINUE: "continue"> |

    <IF: "if"> |
    <ELSE: "else"> |
    <ELSEIF: "elseif"> |
    <AND: "and"> |
    <OR: "or"> |
    <XOR: "xor"> |
    <NOT: "not"> |

    <FUNCTION: "function"> |

    <CLASS: "class"> |
    <EXTENDS: "extends" > |
    <VAR: "var"> |
    <PUBLIC: "public"> |
    <PRIVATE: "private"> |
    <PROTECTED: "protected"> |
    <ABSTRACT: "abstract"> |
    <FINAL: "final" > |
    <STATIC: "static" > |
    <INTERFACE: "interface"> |
    <IMPLEMENTS: "implements"> |
    <CONST: "const" > |
    <CLONE: "clone" > |
    <INSTANCEOF: "instanceof" > |

    <GLOBAL: "global"> |

    <ARRAY: "array"> |

    <NEW: "new" > |

    <PREDEFINED_CONSTANT: "null" | "true" | "false" > |

    <PHP_END: "?>"  > : HTML_STATE |
    <DOLLAR: "$" > :VAR_NAME_STATE |
    <SEMICOLON: ";">
|     <TRY: "try">
|    <CATCH: "catch">
|    <THROW: "throw">
|   <GT: "<">
}

<VAR_NAME_STATE> TOKEN :
{    <VAR_NAME: <LETTER1> (<LETTER1> | <DIGIT1>)*> : DEFAULT
|          <#LETTER1: ["A"-"Z","_","a"-"z"]>
|          <#DIGIT1: ["0"-"9"]>
|    <DOLLAR1: "$">
}

<DEFAULT> TOKEN: {
    <VARTYPE: ("boolean" | "bool" | "integer" | "int" | "float" | "double" | "real" | "string" )>
}


<DEFAULT> TOKEN : {
     <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|          <#LETTER: ["A"-"Z","_","a"-"z"]>
|          <#DIGIT: ["0"-"9"]>
}

<DEFAULT> TOKEN : {
    <FQCN: ("\\")? <IDENTIFIER> ("\\" <IDENTIFIER>)*>
}

/*********************************
 * Start of PHP Language Grammar *
 *********************************/

PhpFile PhpFile() :
{
    String namespace = "";
    PhpClass cd = null;
    List classes = null;
}
{
    (
        <PHP_BEGIN>
        (<SLASH_STAR_COMMENT>)?
        [ LOOKAHEAD(NamespaceDeclaration()) namespace = NamespaceDeclaration() ]
        (
            UseStatement() |
            <SLASH_STAR_COMMENT> |
            LOOKAHEAD(2) cd = ClassDeclaration(namespace) { classes = add(classes, cd); } |
            Statement()
        )*

        ( <EOF> | "\u001A" /** ctrl+z char **/)
    |     <EOF>
    )

    { return new PhpFile(namespace, classes); }
}

String NamespaceDeclaration() :
{
    String namespace = null;
}
{
    <NAMESPACE> (namespace = ClassPath()) EndOfStatement()
    { return namespace; }
}

String ClassPath() :
{
    String ret;
}
{
    <FQCN> { ret = token.image; }
    { return ret; }
}

PhpClass ClassDeclaration(String namespace) :
{
    String className = null;
    List classMembers = null;
}
{
    [<ABSTRACT> | <FINAL> ]
    <CLASS>
    <IDENTIFIER> { className = token.image; }
    [<EXTENDS> <IDENTIFIER>]
    [<IMPLEMENTS> <IDENTIFIER> ( "," <IDENTIFIER>) * ]
    classMembers = ClassMembers()

    { return new PhpClass(namespace, className, classMembers); }
}

void EndOfStatement() : {}
{
    ";" | EmbeddedHtml()
}

void EmbeddedHtml() : {}
{    <PHP_END>  ( <HTML>  | <HTML_OTHER> )*
    (
        <PHP_BEGIN>
    |    <EOF>
    )
}

void UseStatement() : {}
{
    <USE> (<IDENTIFIER> | <FQCN>) [ <AS> <IDENTIFIER> ] EndOfStatement()
}

void UseTraitStatement() : {}
{
    <USE> (<IDENTIFIER> | <FQCN>) (EndOfStatement() | CompoundTraiteStatement())
}

void CompoundTraiteStatement() : {}
{
    "{"
        ( TraitMethodRedeclaration())*
    "}"
}

void TraitMethodRedeclaration() : {}
{
    (
        ((<IDENTIFIER> | <FQCN>) ("::" <IDENTIFIER>)?)
        (
            (<AS> Visibility() ((<IDENTIFIER> | <FQCN>) ("::" <IDENTIFIER>)?)) |
            (<INSTEADOF> <IDENTIFIER>))
        )
        EndOfStatement()
}

List ClassMembers() :
{
    List classMembers = null;
    PhpFunction cm = null;
}
{
    "{"
        (cm = MemberDeclaration() { if( cm != null ) { classMembers = add(classMembers, cm); } } )*
    "}"
    { return classMembers; }
}

PhpFunction MemberDeclaration() :
{
    PhpFunction cm = null;
}
{
    (
        LOOKAHEAD( (<SLASH_STAR_COMMENT> | <FINAL> | Visibility() | <STATIC> )* <FUNCTION>) cm = FunctionDeclaration() |
        LOOKAHEAD([Visibility()] <CONST>) [Visibility()] <CONST> <IDENTIFIER> "=" Expression()  EndOfStatement() |
        (<VAR> | Visibility() | <STATIC> )* <DOLLAR> <VAR_NAME> [ "=" Expression() ] ("," <DOLLAR> <VAR_NAME> [ "=" Expression() ])* EndOfStatement() |
        <GLOBAL> Variable() ("," Variable())* EndOfStatement() |
        <ABSTRACT> [Visibility()] [<STATIC>] <FUNCTION> ["&"] <IDENTIFIER> "(" [ParameterList()] ")" EndOfStatement() |
        UseTraitStatement() |
        <SLASH_STAR_COMMENT>
    )
    { return cm; }
}

PhpFunction FunctionDeclaration() :
{
    String name = null;
    String docBlock = null;
}
{
    (<SLASH_STAR_COMMENT> { docBlock = token.image; } )?
    (<FINAL> | Visibility() | <STATIC> )* <FUNCTION> ["&"]
    <IDENTIFIER> { name = token.image; }
     "(" [ParameterList()] ")" CompoundStatement()
    { return new PhpFunction(name, parseDocBlock(docBlock)); }
}

PhpDocBlock parseDocBlock(String docBlock) : {}
{
    {
        if (docBlock == null) {
            return null;
        }
        try {
            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.StringReader(docBlock));
            //Skip first line
            reader.readLine();
            String line;
            String description = "";
            String tagName = null;
            String tagDescription = null;
            List<PhpDocBlockTag> tags = new LinkedList();
            while((line = reader.readLine()) != null) {
                line = line.replaceAll("^[ */]*", "");
                line = line.replaceAll("[ */]*$", "");
                if (line.startsWith("@")) {
                    if (tagName != null) {
                        tags.add(new PhpDocBlockTag(tagName, tagDescription));
                    }
                  int spaceIndex = line.indexOf(' ');
                  if(spaceIndex < 0) {
                    tagName = line.substring(1);
                    line = "";
                  } else {
                    tagName = line.substring(1, spaceIndex);
                    line = line.substring(line.indexOf(tagName) + tagName.length() + 1);
                  }
                }
              tagDescription = "";
              if (tagName == null) {
                    description += line;
                } else {
                    tagDescription += line;
                }
            }
            return new PhpDocBlock(description, tags);
        } catch (Exception e) {
            e.printStackTrace(System.err);
            throw new ParseException(e.getMessage());
        }
    }
}

void Visibility() : {}
{
    <PUBLIC> | <PRIVATE> | <PROTECTED>
}

void Variable() : {}
{
    <DOLLAR> (<DOLLAR1>)* <VAR_NAME>
}

void ParameterList() : {}
{
    Parameter() (LOOKAHEAD(2) "," Parameter())*
}

void Parameter() : {}
{
    [(<IDENTIFIER>|<ARRAY>) ] ["&"] Variable() ( "=" Expression())?
}

void CompoundStatement() : {}
{
    "{"
        ( Statement())*
    "}"
}

void Statement() : {}
{
    LOOKAHEAD(2) NamespaceStatement() |
    LOOKAHEAD(2) UseStatement() |
    LOOKAHEAD(2) LabeledStatement() |
    LOOKAHEAD(2) ClassDeclaration("") |
    LOOKAHEAD(2) InterfaceDeclaration() |
    LOOKAHEAD(2) ExpressionStatement() |
    CompoundStatement() |
    SelectionStatement() |
    IterationStatement() |
    JumpStatement() |
    IncludeStatement() |
    EchoStatement() |
    DefineStatement() |
    MemberDeclaration()
|    ThrowStatement()
|     TryBlock()
|    EndOfStatement()
}

void  ThrowStatement() : {}
{
    <THROW> ClassInstantiation() EndOfStatement()
}

void TryBlock() : {}
{
    <TRY> CompoundStatement() (<CATCH> "(" (<IDENTIFIER> | <FQCN>) Variable() ")" CompoundStatement())+
}



void DefineStatement() : {}
{
    <DEFINE> "(" String() "," Expression() ")" EndOfStatement()
}

void LabeledStatement() : {}
{
    <CASE> Expression() ":" Statement() |
    <DFLT> ":" Statement()
}

void ExpressionStatement() : {}
{
    Expression() EndOfStatement()
}

void SelectionStatement() : {}
{
    <IF> "(" Expression() ")" Statement() ( LOOKAHEAD(2) <ELSEIF> "(" Expression() ")" Statement() )* [ LOOKAHEAD(2) <ELSE> Statement() ] |
    <SWITCH> "(" Expression() ")" Statement()
}

void IterationStatement() : {}
{
    <WHILE> "(" Expression() ")" Statement() |
    <DO> Statement() <WHILE> "(" Expression() ")" EndOfStatement() |
    <FOR> "(" [ Expression() ] ";" [ Expression() ] ";" [ Expression() ] ")" Statement() |
    <FOREACH> "(" [Expression() ] <AS> Variable() ( "=>" ["&"] Variable())? ")" Statement()
}

void JumpStatement() : {}
{
    <CONTINUE> [<INTEGER_LITERAL>] EndOfStatement() |
    <BREAK> [<INTEGER_LITERAL>] EndOfStatement() |
    <RETURN> [ Expression() ] EndOfStatement()
}

void NamespaceStatement() : {}
{
    <NAMESPACE> <IDENTIFIER>("\\"<IDENTIFIER>)* EndOfStatement()
}

void InlineFunction() : {}
{
     <FUNCTION> "(" [ParameterList()] ")" (<USE> "(" [ParameterList()] ")")? CompoundStatement()
}

void InterfaceDeclaration() : {}
{
    <INTERFACE> <IDENTIFIER> [<EXTENDS> <IDENTIFIER> ("," <IDENTIFIER> )* ] InterfaceMembers()
}

void InterfaceMembers() : {}
{
    "{" ( [<PUBLIC>] InterfaceMember() EndOfStatement() )* "}"
}

void InterfaceMember() : {}
{
    [<ABSTRACT>] <FUNCTION> ["&"]  <IDENTIFIER> "(" [ParameterList()] ")" ["{" "}" ]|
    <DOLLAR> <VAR_NAME> ("," <DOLLAR> <VAR_NAME>)* |
    <CONST> <IDENTIFIER> "=" Expression()
}

void IncludeStatement() : {}
{
    ["@"] ( <INCLUDE> | <INCLUDE_ONCE> | <REQUIRE> | <REQUIRE_ONCE> ) (LOOKAHEAD(2) "(" Expression() ")" | Expression() ) EndOfStatement()
}

void EchoStatement() : {}
{
    (<ECHO> | <PRINT> ) ArgumentExpressionList() EndOfStatement()
}

void Expression() : {}
{
     LogicalTextOrExpression()
}

void LogicalTextOrExpression() :{}
{
    LogicalTextXorExpression() [LOOKAHEAD(2) <OR> LogicalTextOrExpression() ]
}

void LogicalTextXorExpression() : {}
{
    LogicalTextAndExpression() [LOOKAHEAD(2) <XOR> LogicalTextXorExpression() ]
}

void LogicalTextAndExpression() : {}
{
    AssignmentExpression() [LOOKAHEAD(2) <AND> LogicalTextAndExpression() ]
}

void AssignmentExpression() : {}
{
    ConditionalExpression() [LOOKAHEAD(2) AssignmentOperator() ( Expression() | InlineFunction() ) ]
}

void AssignmentOperator() : {}
{
    ( "=" | "+=" | "-=" | "*=" | "/=" | ".=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" )
}

void ConditionalExpression() : {}
{
    Logical_Or_Expression() [LOOKAHEAD(2) "?" Expression() ":" Expression() ]
}


void Logical_Or_Expression() : {}
{
    Logical_And_Expression() [LOOKAHEAD(2) "||" Logical_Or_Expression() ]
}

void Logical_And_Expression() : {}
{
    BitwiseOrExpression() [LOOKAHEAD(2) "&&" Logical_And_Expression() ]
}

void BitwiseOrExpression() : {}
{
    BitwiseXorExpression() [LOOKAHEAD(2) "|" BitwiseOrExpression() ]
}

void BitwiseXorExpression() : {}
{
    BitwiseAndExpression() [LOOKAHEAD(2) "^" BitwiseXorExpression() ]
}

void BitwiseAndExpression() : {}
{
    EqualityExpression() [LOOKAHEAD(2) "&" BitwiseAndExpression() ]
}

void EqualityExpression() : {}
{
    RelationalExpression() [LOOKAHEAD(2) ( "==" | "!=" | "===" | "!==" ) EqualityExpression() ]
}

void RelationalExpression() : {}
{
    ShiftExpression() [LOOKAHEAD(2) ( "<" | ">" | "<=" | ">=" ) RelationalExpression() ]
}

void ShiftExpression() : {}
{
    AdditiveExpression() [LOOKAHEAD(2) ( "<<" | ">>" ) ShiftExpression() ]
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression() [LOOKAHEAD(2) ( "+" | "-" | "." ) AdditiveExpression() ]
}

void MultiplicativeExpression() : {}
{
    CastExpression() [LOOKAHEAD(2) ( "*" | "/" | "%" ) MultiplicativeExpression() ]
}

void CastExpression() : {}
{
    [ LOOKAHEAD("(" <VARTYPE> ")") "(" <VARTYPE> ")" ] UnaryExpression()
}

void UnaryExpression() : {}
{
    ("&" | "-" | "~" | "!")* PrefixIncDecExpression()
}

void PrefixIncDecExpression() : {}
{
    ("++" | "--" )* PostfixIncDecExpression()
}

void PostfixIncDecExpression() : {}
{
     InstanceOfExpression() ("++" | "--" )*
}

void InstanceOfExpression() : {}
{
    PostfixExpression() [LOOKAHEAD(2) <INSTANCEOF> Expression() ]
}

void PostfixExpression() : {}
{
    PrimaryExpression() ( "("  ArgumentExpressionList() ")" |
                          "->" PostfixExpression() | /* TODO: There is a problem here.  Variable members
                                                          can have reserved names since they are preceded
                                                          by a $, but the $ is ommitted here and this
                                                          parser will complain.  If you have declared:
                                                              private $array
                                                          you can have:
                                                              $this->array
                                                        which is fine with PHP,
                                                        but will generate an error in this parser */

                          "::" PostfixExpression() |
                          "[" [ Expression()] "]" |
                          "{" Expression() "}"

                         )*
}

void PrimaryExpression() : {}
{

    LOOKAHEAD(2) ["@"]  Variable() |
    ["@"] Constant() |
    "(" Expression() ")" |
    ClassInstantiation() |
    Array() |
    ArrayShort () |
    <STATIC>
}

void Array() : {}
{
    <ARRAY> "("  ArrayContent() ")"
}

void ArrayShort() : {}
{
    "[" ArrayContent() "]"
}

void ArrayContent() : {}
{
    [Expression() ["=>" Expression() ]] ( "," [ Expression() ["=>" Expression()] ] )*
}

void ClassInstantiation() : {}
{
    <NEW>  (Expression() | <FQCN>) [LOOKAHEAD(3) "(" ArgumentExpressionList() ")"] |
    <CLONE> Variable()
}

void ArgumentExpressionList() : {}
{
    [Expression() | InlineFunction()] ( "," Expression() | InlineFunction())*
}

void Constant() : {}
{
    <INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> | String() | <PREDEFINED_CONSTANT> | <IDENTIFIER> | <CLASS>
}

void String() : {}
{
    DoubleStringLiteral() |
    <SINGLE_STRING_LITERAL_START> <SINGLE_STRING_LITERAL_END>|
    <HEREDOC_START>
}

void DoubleStringLiteral() : {}
{
    <DOUBLE_STRING_LITERAL_START>
    (
        LOOKAHEAD(2) <DSL_SIMPLE_VAR_START> <DSL_SIMPLE_STRING_VAR_END>
    |    (
            <DSL_SIMPLE_VAR_START>
             (
                <DSL_SIMPLE_VAR_END>
    |            <DSL_SIMPLE_VAR_WASNT>
            )
    |        <DSL_COMPLEX_VAR_START> <DSL_COMPLEX_VAR_END>
        )* <DOUBLE_STRING_LITERAL_END>
    )
}
